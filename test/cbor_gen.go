// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package test

import (
	"fmt"
	"io"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

func (t *GameRoundInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{164}); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.GameID (string) (string)
	if len("GameID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"GameID\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("GameID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("GameID")); err != nil {
		return err
	}

	if len(t.GameID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.GameID was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.GameID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.GameID)); err != nil {
		return err
	}

	// t.RoundID (string) (string)
	if len("RoundID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"RoundID\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("RoundID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("RoundID")); err != nil {
		return err
	}

	if len(t.RoundID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.RoundID was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.RoundID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.RoundID)); err != nil {
		return err
	}

	// t.ReplayID (string) (string)
	if len("ReplayID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ReplayID\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("ReplayID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ReplayID")); err != nil {
		return err
	}

	if len(t.ReplayID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ReplayID was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.ReplayID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ReplayID)); err != nil {
		return err
	}

	// t.PlayerIDs (string) (string)
	if len("PlayerIDs") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"PlayerIDs\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("PlayerIDs"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("PlayerIDs")); err != nil {
		return err
	}

	if len(t.PlayerIDs) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.PlayerIDs was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.PlayerIDs))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.PlayerIDs)); err != nil {
		return err
	}
	return nil
}

func (t *GameRoundInfo) UnmarshalCBOR(r io.Reader) error {
	*t = GameRoundInfo{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("GameRoundInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.GameID (string) (string)
		case "GameID":

			{
				sval, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return err
				}

				t.GameID = string(sval)
			}
			// t.RoundID (string) (string)
		case "RoundID":

			{
				sval, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return err
				}

				t.RoundID = string(sval)
			}
			// t.ReplayID (string) (string)
		case "ReplayID":

			{
				sval, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return err
				}

				t.ReplayID = string(sval)
			}
			// t.PlayerIDs (string) (string)
		case "PlayerIDs":

			{
				sval, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return err
				}

				t.PlayerIDs = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
